;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [1120 1570])
            ("function-put" code nil nil [1571 1613])
            ("function-put" code nil nil [1614 1662])
            ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1783 2115])
            ("defalias" code nil nil [2117 3259])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (list (quote make-obsolete) (list (quote quote) f) (list (quote quote) new-name) (list (quote quote) when))))) (list (quote interactive-only) (function (lambda (f _args instead) (list (quote function-put) (list (quote quote) f) (quote (quote interactive-only)) (list (quote quote) instead))))) (list (quote pure) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote pure)) (list (quote quote) val)))) "If non-nil, the compiler can replace calls with their return value.
This may shift errors from run-time to compile-time.") (list (quote side-effect-free) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote side-effect-free)) (list (quote quote) val)))) "If non-nil, calls can be ignored if their value is unused.
If `error-free', drop calls even if `byte-compile-delete-errors' is nil.") (list (quote compiler-macro) (function (lambda (f args compiler-function) (if (not (eq (car-safe compiler-function) (quote lambda))) (\` (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, compiler-function))))) (let ((cfname (intern (concat (symbol-name f) "--anon-cmacro")))) (\` (progn (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, cfname)))) :autoload-end (eval-and-compile (defun (\, cfname) ((\,@ (cadr compiler-function)) (\,@ args)) (\,@ (cddr compiler-function))))))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote function-put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [3515 6459])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) (cons (list (quote no-font-lock-keyword) (function (lambda (name _args val) (list (quote function-put) (list (quote quote) name) (quote (quote no-font-lock-keyword)) (list (quote quote) val))))) defun-declarations-alist))) nil [6461 7236])
            ("defalias" code nil nil [7238 9491])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [9540 11919])
            ("fset" code nil nil [12026 12047])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [13058 13529])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [13531 13609])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [13611 13981])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [13983 14876])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [14878 15713])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [15715 16546])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [16549 18258])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [18588 18974])
            ("dont-compile" function (:arguments ("body")) nil [18976 19285])
            ("eval-when-compile" function (:arguments ("body")) nil [19528 20021])
            ("eval-and-compile" function (:arguments ("body")) nil [20023 20594])
            ("with-no-warnings" function (:arguments ("body")) nil [20596 20804])
            ("make-obsolete-variable" code nil nil [22099 22208])
            ("make-obsolete" code nil nil [22209 22300]))          
      :file "byte-run.el"
      :pointmax 22328
      :fsize 22327
      :lastmodtime '(21998 31895 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Program Files!emacs!share!emacs!25.0.50!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
